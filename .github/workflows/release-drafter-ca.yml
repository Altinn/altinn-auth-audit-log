name: Schedule a release and tag image for the cotnainer app
on:
  workflow_dispatch:
  schedule:
     - cron: "0 0 * * 3"

env:
  RELEASEPREFIX: auditlogca-
  VERSIONPREFIX: v
  REGISTRY: ghcr.io
  REPOSITORY: altinn/altinn-auth-audit-log

jobs:     
  getlatestrelease:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      issues: write
      packages: write
    
    steps:
      - name: Get latest version for function app
        uses: oprypin/find-latest-tag@v1
        continue-on-error: true
        with:
          repository: ${{ env.REPOSITORY }}
          releases-only: true
          prefix: ${{ env.RELEASEPREFIX }}${{ env.VERSIONPREFIX }}  # Other kinds of tags are irrelevant;
        id: auditlogca_version
      - name: setup current year
        id: get_year
        run: |
          echo "currentyear=$(date +%Y)" >> $GITHUB_ENV

      - name: print status
        run: "echo Release could not be found. Request failed with status '${{ steps.get_latest_release_version.outputs.status }}'"
      
      - name: split release version f.ex v2023.1 will be split into output0 v2023 and output1 1
        if: ${{ steps.auditlogca_version.outcome == 'success' }}
        uses: winterjung/split@v2
        id: split
        with:
          msg: "${{ steps.auditlogca_version.outputs.tag }}"
          separator: '.'
          
      - name: split 'v' and year f.ex v2023 will be split into output0 v and output1 2023
        if: ${{ steps.auditlogca_version.outcome == 'success' }}
        uses: winterjung/split@v2
        id: splitv
        with:
          msg: "${{ steps.split.outputs._0 }}"
          separator: 'v'
          
      - name: Increment release version f.ex the release version for the year is incremented
        if: ${{ steps.auditlogca_version.outcome == 'success' }}
        id: update_version
        env:
          NUM: ${{ steps.split.outputs._1 }}
        run: |
          echo "VERSION=$(($NUM + 1))" >> $GITHUB_ENV
          
      - name: Format new release version when there is atleast 1 previous release. If the release is created in the new year, the current year is set and the identity is reset to 1.
        if: ${{ steps.auditlogca_version.outcome == 'success' }}
        id: format_version
        env:
          RELEASE_YEAR: ${{ steps.splitv.outputs._1 }}
        run: |
          if [ ${{ env.currentyear }} -gt  ${{ env.RELEASE_YEAR }} ]
          then
             echo "RELEASEVERSION=${{ env.VERSIONPREFIX }}${{ env.currentyear }}.1" >> $GITHUB_OUTPUT
          else
             echo "RELEASEVERSION=${{ env.VERSIONPREFIX }}${{ env.RELEASE_YEAR }}.${{ env.VERSION }}" >> $GITHUB_OUTPUT
          fi
    
      - name: Set release version if 0 releases. The initial version is set to the v{currentyear}.{identity} f.ex v2023.1
        id: releaseversion
        run: |
          if [ ${{ steps.auditlogca_version.outcome }} = 'success' ]
          then
            echo "RELEASE=${{ env.RELEASEPREFIX }}${{ steps.format_version.outputs.RELEASEVERSION }}" >> $GITHUB_OUTPUT
          else
            echo "RELEASE=${{ env.RELEASEPREFIX }}${{ env.VERSIONPREFIX }}${{ env.currentyear }}.1" >> $GITHUB_OUTPUT
          fi
    outputs:
      RELEASEVERSION: ${{ steps.releaseversion.outputs.RELEASE }}
    
  tag:
    name: Tag image with release version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      issues: write
      packages: write
    needs: [getlatestrelease]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get package versions
        uses: octokit/request-action@v2.x
        id: get_package_versions
        with:
          route: GET /user/packages/container/altinn-auth-audit-log/versions
          mediaType: | # The | is significant!
            format: raw
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get latest imagetag
        id: get_imagetag
        run: |
         responses='${{ steps.get_package_versions.outputs.data }}'
         echo $responses | jq '.[0] | .metadata.container.tags[0]' | sed 's/"//g'
         latesttag=$(echo $responses | jq '.[0] | .metadata.container.tags[0]' | sed 's/"//g')
         echo "version:$latesttag"         
         echo "imagetag=$latesttag" >> $GITHUB_OUTPUT
      - id: version
        uses: battila7/get-version-action@v2
      - name: Add Version tag to Docker Image
        uses: shrink/actions-docker-registry-tag@v4
        with:
          registry: ${{ env.REGISTRY }}
          repository: '${{ env.REPOSITORY }}'
          target: '${{ steps.get_imagetag.outputs.imagetag }}'
          tags: ${{ needs.getlatestrelease.outputs.RELEASEVERSION }}

  update_release_draft:
    name: Release Drafter with releaseversion that was formatted
    needs: [getlatestrelease,tag]
    permissions:
      contents: write  # for release-drafter/release-drafter to create a github release
      pull-requests: write  # for release-drafter/release-drafter to add label to PR
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.getlatestrelease.outputs.RELEASEVERSION }}
          version: ${{ needs.getlatestrelease.outputs.RELEASEVERSION }}